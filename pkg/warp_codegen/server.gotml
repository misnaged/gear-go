{{define "server_rs" -}}
{{if IsCleanBuild -}}
fn main() {
    println!("");
}
{{else -}}
 mod sign_transaction;

 use tonic::{transport::Server, Request, Response, Status};

  // The module generated by tonic-build from your .proto file
  pub mod gear_grpc {
      include!("gear_grpc.rs"); // This macro includes the generated code
  }

  use gear_grpc::{
      gear_grpc_service_server::{GearGrpcService, GearGrpcServiceServer},
      EncodedVoucherIssue, VoucherParams,
  };
 use crate::sign_transaction::voucher_issue;

 #[derive(Debug, Default)]
  pub struct MyGearGrpcService;

  #[tonic::async_trait]
  impl GearGrpcService for MyGearGrpcService {
      async fn call_voucher_issue(
          &self,
          request: Request<VoucherParams>,
      ) -> Result<Response<EncodedVoucherIssue>, Status> {

          let params = request.into_inner();

          let encoded_call = voucher_issue(&*params.spender, &*params.balance, params.code_uploading, params.duration as u32);

          let reply = EncodedVoucherIssue { encoded_call };

          Ok(Response::new(reply))
      }
  }

  #[tokio::main]
  async fn main() -> Result<(), Box<dyn std::error::Error>> {
      let addr = "127.0.0.1:9090".parse()?;
      let pb_service = MyGearGrpcService::default();

      println!("GearGrpcService server listening on {}", addr);

      Server::builder()
          .add_service(GearGrpcServiceServer::new(pb_service))
          .serve(addr)
          .await?;

      Ok(())
  }

{{end}}
{{end -}}